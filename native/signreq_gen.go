package native

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *SignReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DWalletID":
			z.DWalletID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DWalletID")
				return
			}
		case "UserSig":
			z.UserSig, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UserSig")
				return
			}
		case "Payload":
			z.Payload, err = dc.ReadBytes(z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "FinalSig":
			z.FinalSig, err = dc.ReadBytes(z.FinalSig)
			if err != nil {
				err = msgp.WrapError(err, "FinalSig")
				return
			}
		case "ID":
			z.ID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Timestamp":
			z.Timestamp, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SignReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "DWalletID"
	err = en.Append(0x86, 0xa9, 0x44, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.DWalletID)
	if err != nil {
		err = msgp.WrapError(err, "DWalletID")
		return
	}
	// write "UserSig"
	err = en.Append(0xa7, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67)
	if err != nil {
		return
	}
	err = en.WriteString(z.UserSig)
	if err != nil {
		err = msgp.WrapError(err, "UserSig")
		return
	}
	// write "Payload"
	err = en.Append(0xa7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Payload)
	if err != nil {
		err = msgp.WrapError(err, "Payload")
		return
	}
	// write "FinalSig"
	err = en.Append(0xa8, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.FinalSig)
	if err != nil {
		err = msgp.WrapError(err, "FinalSig")
		return
	}
	// write "ID"
	err = en.Append(0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SignReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "DWalletID"
	o = append(o, 0x86, 0xa9, 0x44, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x44)
	o = msgp.AppendString(o, z.DWalletID)
	// string "UserSig"
	o = append(o, 0xa7, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67)
	o = msgp.AppendString(o, z.UserSig)
	// string "Payload"
	o = append(o, 0xa7, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64)
	o = msgp.AppendBytes(o, z.Payload)
	// string "FinalSig"
	o = append(o, 0xa8, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x69, 0x67)
	o = msgp.AppendBytes(o, z.FinalSig)
	// string "ID"
	o = append(o, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt64(o, z.ID)
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o = msgp.AppendInt64(o, z.Timestamp)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DWalletID":
			z.DWalletID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DWalletID")
				return
			}
		case "UserSig":
			z.UserSig, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserSig")
				return
			}
		case "Payload":
			z.Payload, bts, err = msgp.ReadBytesBytes(bts, z.Payload)
			if err != nil {
				err = msgp.WrapError(err, "Payload")
				return
			}
		case "FinalSig":
			z.FinalSig, bts, err = msgp.ReadBytesBytes(bts, z.FinalSig)
			if err != nil {
				err = msgp.WrapError(err, "FinalSig")
				return
			}
		case "ID":
			z.ID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Timestamp":
			z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SignReq) Msgsize() (s int) {
	s = 1 + 10 + msgp.StringPrefixSize + len(z.DWalletID) + 8 + msgp.StringPrefixSize + len(z.UserSig) + 8 + msgp.BytesPrefixSize + len(z.Payload) + 9 + msgp.BytesPrefixSize + len(z.FinalSig) + 3 + msgp.Int64Size + 10 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SignReqs) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(SignReqs, zb0002)
	}
	for zb0001 := range *z {
		err = (*z)[zb0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SignReqs) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteArrayHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0003 := range z {
		err = z[zb0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SignReqs) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendArrayHeader(o, uint32(len(z)))
	for zb0003 := range z {
		o, err = z[zb0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, zb0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SignReqs) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if cap((*z)) >= int(zb0002) {
		(*z) = (*z)[:zb0002]
	} else {
		(*z) = make(SignReqs, zb0002)
	}
	for zb0001 := range *z {
		bts, err = (*z)[zb0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SignReqs) Msgsize() (s int) {
	s = msgp.ArrayHeaderSize
	for zb0003 := range z {
		s += z[zb0003].Msgsize()
	}
	return
}
