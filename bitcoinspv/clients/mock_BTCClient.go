// Code generated by mockery v2.53.1. DO NOT EDIT.

package clients

import (
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	btc "github.com/gonative-cc/relayer/bitcoinspv/types/btc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/gonative-cc/relayer/bitcoinspv/types"

	wire "github.com/btcsuite/btcd/wire"
)

// MockBTCClient is an autogenerated mock type for the BTCClient type
type MockBTCClient struct {
	mock.Mock
}

type MockBTCClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBTCClient) EXPECT() *MockBTCClient_Expecter {
	return &MockBTCClient_Expecter{mock: &_m.Mock}
}

// BlockEventChannel provides a mock function with no fields
func (_m *MockBTCClient) BlockEventChannel() <-chan *btc.BlockEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockEventChannel")
	}

	var r0 <-chan *btc.BlockEvent
	if rf, ok := ret.Get(0).(func() <-chan *btc.BlockEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *btc.BlockEvent)
		}
	}

	return r0
}

// MockBTCClient_BlockEventChannel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BlockEventChannel'
type MockBTCClient_BlockEventChannel_Call struct {
	*mock.Call
}

// BlockEventChannel is a helper method to define mock.On call
func (_e *MockBTCClient_Expecter) BlockEventChannel() *MockBTCClient_BlockEventChannel_Call {
	return &MockBTCClient_BlockEventChannel_Call{Call: _e.mock.On("BlockEventChannel")}
}

func (_c *MockBTCClient_BlockEventChannel_Call) Run(run func()) *MockBTCClient_BlockEventChannel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBTCClient_BlockEventChannel_Call) Return(_a0 <-chan *btc.BlockEvent) *MockBTCClient_BlockEventChannel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockBTCClient_BlockEventChannel_Call) RunAndReturn(run func() <-chan *btc.BlockEvent) *MockBTCClient_BlockEventChannel_Call {
	_c.Call.Return(run)
	return _c
}

// GetBTCBlockByHash provides a mock function with given fields: blockHash
func (_m *MockBTCClient) GetBTCBlockByHash(blockHash *chainhash.Hash) (*types.IndexedBlock, *wire.MsgBlock, error) {
	ret := _m.Called(blockHash)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCBlockByHash")
	}

	var r0 *types.IndexedBlock
	var r1 *wire.MsgBlock
	var r2 error
	if rf, ok := ret.Get(0).(func(*chainhash.Hash) (*types.IndexedBlock, *wire.MsgBlock, error)); ok {
		return rf(blockHash)
	}
	if rf, ok := ret.Get(0).(func(*chainhash.Hash) *types.IndexedBlock); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IndexedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(*chainhash.Hash) *wire.MsgBlock); ok {
		r1 = rf(blockHash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wire.MsgBlock)
		}
	}

	if rf, ok := ret.Get(2).(func(*chainhash.Hash) error); ok {
		r2 = rf(blockHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBTCClient_GetBTCBlockByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBTCBlockByHash'
type MockBTCClient_GetBTCBlockByHash_Call struct {
	*mock.Call
}

// GetBTCBlockByHash is a helper method to define mock.On call
//   - blockHash *chainhash.Hash
func (_e *MockBTCClient_Expecter) GetBTCBlockByHash(blockHash interface{}) *MockBTCClient_GetBTCBlockByHash_Call {
	return &MockBTCClient_GetBTCBlockByHash_Call{Call: _e.mock.On("GetBTCBlockByHash", blockHash)}
}

func (_c *MockBTCClient_GetBTCBlockByHash_Call) Run(run func(blockHash *chainhash.Hash)) *MockBTCClient_GetBTCBlockByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*chainhash.Hash))
	})
	return _c
}

func (_c *MockBTCClient_GetBTCBlockByHash_Call) Return(_a0 *types.IndexedBlock, _a1 *wire.MsgBlock, _a2 error) *MockBTCClient_GetBTCBlockByHash_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBTCClient_GetBTCBlockByHash_Call) RunAndReturn(run func(*chainhash.Hash) (*types.IndexedBlock, *wire.MsgBlock, error)) *MockBTCClient_GetBTCBlockByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetBTCBlockByHeight provides a mock function with given fields: height
func (_m *MockBTCClient) GetBTCBlockByHeight(height int64) (*types.IndexedBlock, *wire.MsgBlock, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCBlockByHeight")
	}

	var r0 *types.IndexedBlock
	var r1 *wire.MsgBlock
	var r2 error
	if rf, ok := ret.Get(0).(func(int64) (*types.IndexedBlock, *wire.MsgBlock, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(int64) *types.IndexedBlock); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IndexedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) *wire.MsgBlock); ok {
		r1 = rf(height)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wire.MsgBlock)
		}
	}

	if rf, ok := ret.Get(2).(func(int64) error); ok {
		r2 = rf(height)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBTCClient_GetBTCBlockByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBTCBlockByHeight'
type MockBTCClient_GetBTCBlockByHeight_Call struct {
	*mock.Call
}

// GetBTCBlockByHeight is a helper method to define mock.On call
//   - height int64
func (_e *MockBTCClient_Expecter) GetBTCBlockByHeight(height interface{}) *MockBTCClient_GetBTCBlockByHeight_Call {
	return &MockBTCClient_GetBTCBlockByHeight_Call{Call: _e.mock.On("GetBTCBlockByHeight", height)}
}

func (_c *MockBTCClient_GetBTCBlockByHeight_Call) Run(run func(height int64)) *MockBTCClient_GetBTCBlockByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockBTCClient_GetBTCBlockByHeight_Call) Return(_a0 *types.IndexedBlock, _a1 *wire.MsgBlock, _a2 error) *MockBTCClient_GetBTCBlockByHeight_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBTCClient_GetBTCBlockByHeight_Call) RunAndReturn(run func(int64) (*types.IndexedBlock, *wire.MsgBlock, error)) *MockBTCClient_GetBTCBlockByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBTCTailBlocksByHeight provides a mock function with given fields: height
func (_m *MockBTCClient) GetBTCTailBlocksByHeight(height int64) ([]*types.IndexedBlock, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCTailBlocksByHeight")
	}

	var r0 []*types.IndexedBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*types.IndexedBlock, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(int64) []*types.IndexedBlock); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.IndexedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBTCClient_GetBTCTailBlocksByHeight_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBTCTailBlocksByHeight'
type MockBTCClient_GetBTCTailBlocksByHeight_Call struct {
	*mock.Call
}

// GetBTCTailBlocksByHeight is a helper method to define mock.On call
//   - height int64
func (_e *MockBTCClient_Expecter) GetBTCTailBlocksByHeight(height interface{}) *MockBTCClient_GetBTCTailBlocksByHeight_Call {
	return &MockBTCClient_GetBTCTailBlocksByHeight_Call{Call: _e.mock.On("GetBTCTailBlocksByHeight", height)}
}

func (_c *MockBTCClient_GetBTCTailBlocksByHeight_Call) Run(run func(height int64)) *MockBTCClient_GetBTCTailBlocksByHeight_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockBTCClient_GetBTCTailBlocksByHeight_Call) Return(_a0 []*types.IndexedBlock, _a1 error) *MockBTCClient_GetBTCTailBlocksByHeight_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBTCClient_GetBTCTailBlocksByHeight_Call) RunAndReturn(run func(int64) ([]*types.IndexedBlock, error)) *MockBTCClient_GetBTCTailBlocksByHeight_Call {
	_c.Call.Return(run)
	return _c
}

// GetBTCTipBlock provides a mock function with no fields
func (_m *MockBTCClient) GetBTCTipBlock() (*chainhash.Hash, int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBTCTipBlock")
	}

	var r0 *chainhash.Hash
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func() (*chainhash.Hash, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *chainhash.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainhash.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockBTCClient_GetBTCTipBlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBTCTipBlock'
type MockBTCClient_GetBTCTipBlock_Call struct {
	*mock.Call
}

// GetBTCTipBlock is a helper method to define mock.On call
func (_e *MockBTCClient_Expecter) GetBTCTipBlock() *MockBTCClient_GetBTCTipBlock_Call {
	return &MockBTCClient_GetBTCTipBlock_Call{Call: _e.mock.On("GetBTCTipBlock")}
}

func (_c *MockBTCClient_GetBTCTipBlock_Call) Run(run func()) *MockBTCClient_GetBTCTipBlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBTCClient_GetBTCTipBlock_Call) Return(_a0 *chainhash.Hash, _a1 int64, _a2 error) *MockBTCClient_GetBTCTipBlock_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockBTCClient_GetBTCTipBlock_Call) RunAndReturn(run func() (*chainhash.Hash, int64, error)) *MockBTCClient_GetBTCTipBlock_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockBTCClient) Stop() {
	_m.Called()
}

// MockBTCClient_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockBTCClient_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockBTCClient_Expecter) Stop() *MockBTCClient_Stop_Call {
	return &MockBTCClient_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockBTCClient_Stop_Call) Run(run func()) *MockBTCClient_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBTCClient_Stop_Call) Return() *MockBTCClient_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBTCClient_Stop_Call) RunAndReturn(run func()) *MockBTCClient_Stop_Call {
	_c.Run(run)
	return _c
}

// SubscribeNewBlocks provides a mock function with no fields
func (_m *MockBTCClient) SubscribeNewBlocks() {
	_m.Called()
}

// MockBTCClient_SubscribeNewBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeNewBlocks'
type MockBTCClient_SubscribeNewBlocks_Call struct {
	*mock.Call
}

// SubscribeNewBlocks is a helper method to define mock.On call
func (_e *MockBTCClient_Expecter) SubscribeNewBlocks() *MockBTCClient_SubscribeNewBlocks_Call {
	return &MockBTCClient_SubscribeNewBlocks_Call{Call: _e.mock.On("SubscribeNewBlocks")}
}

func (_c *MockBTCClient_SubscribeNewBlocks_Call) Run(run func()) *MockBTCClient_SubscribeNewBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBTCClient_SubscribeNewBlocks_Call) Return() *MockBTCClient_SubscribeNewBlocks_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBTCClient_SubscribeNewBlocks_Call) RunAndReturn(run func()) *MockBTCClient_SubscribeNewBlocks_Call {
	_c.Run(run)
	return _c
}

// WaitForShutdown provides a mock function with no fields
func (_m *MockBTCClient) WaitForShutdown() {
	_m.Called()
}

// MockBTCClient_WaitForShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForShutdown'
type MockBTCClient_WaitForShutdown_Call struct {
	*mock.Call
}

// WaitForShutdown is a helper method to define mock.On call
func (_e *MockBTCClient_Expecter) WaitForShutdown() *MockBTCClient_WaitForShutdown_Call {
	return &MockBTCClient_WaitForShutdown_Call{Call: _e.mock.On("WaitForShutdown")}
}

func (_c *MockBTCClient_WaitForShutdown_Call) Run(run func()) *MockBTCClient_WaitForShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBTCClient_WaitForShutdown_Call) Return() *MockBTCClient_WaitForShutdown_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockBTCClient_WaitForShutdown_Call) RunAndReturn(run func()) *MockBTCClient_WaitForShutdown_Call {
	_c.Run(run)
	return _c
}

// NewMockBTCClient creates a new instance of MockBTCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBTCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBTCClient {
	mock := &MockBTCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
