// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	types "github.com/gonative-cc/relayer/bitcoinspv/types"
	mock "github.com/stretchr/testify/mock"
)

// MockIndexer is an autogenerated mock type for the Indexer type
type MockIndexer struct {
	mock.Mock
}

type MockIndexer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndexer) EXPECT() *MockIndexer_Expecter {
	return &MockIndexer_Expecter{mock: &_m.Mock}
}

// SendBlocks provides a mock function with given fields: ctx, blocks
func (_m *MockIndexer) SendBlocks(ctx context.Context, blocks []*types.IndexedBlock) error {
	ret := _m.Called(ctx, blocks)

	if len(ret) == 0 {
		panic("no return value specified for SendBlocks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*types.IndexedBlock) error); ok {
		r0 = rf(ctx, blocks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIndexer_SendBlocks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendBlocks'
type MockIndexer_SendBlocks_Call struct {
	*mock.Call
}

// SendBlocks is a helper method to define mock.On call
//   - ctx context.Context
//   - blocks []*types.IndexedBlock
func (_e *MockIndexer_Expecter) SendBlocks(ctx interface{}, blocks interface{}) *MockIndexer_SendBlocks_Call {
	return &MockIndexer_SendBlocks_Call{Call: _e.mock.On("SendBlocks", ctx, blocks)}
}

func (_c *MockIndexer_SendBlocks_Call) Run(run func(ctx context.Context, blocks []*types.IndexedBlock)) *MockIndexer_SendBlocks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*types.IndexedBlock))
	})
	return _c
}

func (_c *MockIndexer_SendBlocks_Call) Return(_a0 error) *MockIndexer_SendBlocks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIndexer_SendBlocks_Call) RunAndReturn(run func(context.Context, []*types.IndexedBlock) error) *MockIndexer_SendBlocks_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIndexer creates a new instance of MockIndexer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIndexer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIndexer {
	mock := &MockIndexer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
