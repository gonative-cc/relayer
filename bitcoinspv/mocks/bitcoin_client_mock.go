// Code generated by mockery v2.53.1. DO NOT EDIT.

package mocks

import (
	chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
	btc "github.com/gonative-cc/relayer/bitcoinspv/types/btc"

	mock "github.com/stretchr/testify/mock"

	types "github.com/gonative-cc/relayer/bitcoinspv/types"

	wire "github.com/btcsuite/btcd/wire"
)

// BTCClient is an autogenerated mock type for the BTCClient type
type BTCClient struct {
	mock.Mock
}

// BlockEventChannel provides a mock function with no fields
func (_m *BTCClient) BlockEventChannel() <-chan *btc.BlockEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BlockEventChannel")
	}

	var r0 <-chan *btc.BlockEvent
	if rf, ok := ret.Get(0).(func() <-chan *btc.BlockEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *btc.BlockEvent)
		}
	}

	return r0
}

// GetBTCBlockByHash provides a mock function with given fields: blockHash
func (_m *BTCClient) GetBTCBlockByHash(blockHash *chainhash.Hash) (*types.IndexedBlock, *wire.MsgBlock, error) {
	ret := _m.Called(blockHash)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCBlockByHash")
	}

	var r0 *types.IndexedBlock
	var r1 *wire.MsgBlock
	var r2 error
	if rf, ok := ret.Get(0).(func(*chainhash.Hash) (*types.IndexedBlock, *wire.MsgBlock, error)); ok {
		return rf(blockHash)
	}
	if rf, ok := ret.Get(0).(func(*chainhash.Hash) *types.IndexedBlock); ok {
		r0 = rf(blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IndexedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(*chainhash.Hash) *wire.MsgBlock); ok {
		r1 = rf(blockHash)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wire.MsgBlock)
		}
	}

	if rf, ok := ret.Get(2).(func(*chainhash.Hash) error); ok {
		r2 = rf(blockHash)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBTCBlockByHeight provides a mock function with given fields: height
func (_m *BTCClient) GetBTCBlockByHeight(height int64) (*types.IndexedBlock, *wire.MsgBlock, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCBlockByHeight")
	}

	var r0 *types.IndexedBlock
	var r1 *wire.MsgBlock
	var r2 error
	if rf, ok := ret.Get(0).(func(int64) (*types.IndexedBlock, *wire.MsgBlock, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(int64) *types.IndexedBlock); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.IndexedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) *wire.MsgBlock); ok {
		r1 = rf(height)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*wire.MsgBlock)
		}
	}

	if rf, ok := ret.Get(2).(func(int64) error); ok {
		r2 = rf(height)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBTCTailBlocksByHeight provides a mock function with given fields: height
func (_m *BTCClient) GetBTCTailBlocksByHeight(height int64) ([]*types.IndexedBlock, error) {
	ret := _m.Called(height)

	if len(ret) == 0 {
		panic("no return value specified for GetBTCTailBlocksByHeight")
	}

	var r0 []*types.IndexedBlock
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]*types.IndexedBlock, error)); ok {
		return rf(height)
	}
	if rf, ok := ret.Get(0).(func(int64) []*types.IndexedBlock); ok {
		r0 = rf(height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*types.IndexedBlock)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(height)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBTCTipBlock provides a mock function with no fields
func (_m *BTCClient) GetBTCTipBlock() (*chainhash.Hash, int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBTCTipBlock")
	}

	var r0 *chainhash.Hash
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func() (*chainhash.Hash, int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *chainhash.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chainhash.Hash)
		}
	}

	if rf, ok := ret.Get(1).(func() int64); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Stop provides a mock function with no fields
func (_m *BTCClient) Stop() {
	_m.Called()
}

// SubscribeNewBlocks provides a mock function with no fields
func (_m *BTCClient) SubscribeNewBlocks() {
	_m.Called()
}

// WaitForShutdown provides a mock function with no fields
func (_m *BTCClient) WaitForShutdown() {
	_m.Called()
}

// NewBTCClient creates a new instance of BTCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBTCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *BTCClient {
	mock := &BTCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
